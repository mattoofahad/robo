{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","StrictMode","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","hassError","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterrobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rooReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3eb0b798.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search The List' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Card =({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='' src={`https://robohash.org/${id}?100x100`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<React.StrictMode>\r\n\t\t\t{\r\n\t\t\t\trobots.map( (user,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t<Card  \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email} \r\n\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\t\r\n\t\t}\r\n\t\t</React.StrictMode>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\t//console.log({props.childern});\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor (props){\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hassError){\r\n\t\t\treturn <h1>Ops That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n} \r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\n\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\nclass App extends React.Component {\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filterrobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending? \r\n\t\t\t<h1>Loading</h1> :\r\n\t\t\t(<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robot Friends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filterrobots} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>);\r\n\t}\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn {\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text}\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=>response.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n} \r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch (action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n\tswitch (action.type){\r\n\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\t\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\t\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false })\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons';\n\nconst logger  = createLogger();\nconst rooReducer = combineReducers({searchRobots, requestRobots});\nconst store = \n\tcreateStore(rooReducer, applyMiddleware(thunkMiddleware, logger));\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}